"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫
"""
import logging
import os
from datetime import datetime
from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from bot.config import config
from bot.database.models import User, UserStatus, Application, ApplicationStatus, Participant
from bot.keyboards import (
    get_cancel_keyboard,
    get_participants_menu,
    get_confirmation_keyboard,
    get_main_menu,
    get_admin_menu
)
from bot.states import ApplicationStates
from bot.utils import (
    validate_date,
    validate_date_range,
    validate_full_name,
    validate_text,
    generate_excel,
    send_email
    # send_to_telegram  # –û–¢–ö–õ–Æ–ß–ï–ù–û: –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Å–ª–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram —á–∞—Ç
)

logger = logging.getLogger(__name__)

router = Router()


async def check_user_access(user_id: int, session: AsyncSession) -> tuple[bool, User | None]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    result = await session.execute(
        select(User).where(User.telegram_id == user_id)
    )
    user = result.scalar_one_or_none()
    
    if not user or user.status != UserStatus.APPROVED:
        return False, user
    
    return True, user


@router.message(F.text == "üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É")
async def start_application(message: Message, state: FSMContext, session: AsyncSession):
    """–ù–∞—á–∞–ª–æ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏"""
    has_access, user = await check_user_access(message.from_user.id, session)
    
    if not has_access:
        await message.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–¥–∞—á–µ –∑–∞—è–≤–æ–∫.\n"
            "–î–æ–∂–¥–∏—Ç–µ—Å—å –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –Ω–µ–º—É."
        )
        return
    
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    await state.update_data(
        participants=[],
        user_full_name=user.full_name or f"{user.first_name or ''} {user.last_name or ''}".strip(),
        user_organization=user.organization or ""
    )
    
    await state.set_state(ApplicationStates.sport_type)
    await message.answer(
        "üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ —Å–ª—É–∂–µ–±–Ω—É—é –ø–æ–µ–∑–¥–∫—É</b>\n\n"
        "–®–∞–≥ 1 –∏–∑ 5: –í–≤–µ–¥–∏—Ç–µ <b>–≤–∏–¥ —Å–ø–æ—Ä—Ç–∞</b>:",
        parse_mode="HTML",
        reply_markup=get_cancel_keyboard()
    )


@router.message(StateFilter(ApplicationStates.sport_type))
async def process_sport_type(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await cancel_application(message, state)
        return
    
    is_valid, error_msg = validate_text(message.text, min_length=2, max_length=255)
    if not is_valid:
        await message.answer(f"‚ùå {error_msg}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(sport_type=message.text.strip())
    await state.set_state(ApplicationStates.event_rank)
    
    await message.answer(
        "‚úÖ –í–∏–¥ —Å–ø–æ—Ä—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω\n\n"
        "–®–∞–≥ 2 –∏–∑ 5: –í–≤–µ–¥–∏—Ç–µ <b>—Ä–∞–Ω–≥ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è</b>:",
        parse_mode="HTML",
        reply_markup=get_cancel_keyboard()
    )


@router.message(StateFilter(ApplicationStates.event_rank))
async def process_event_rank(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ä–∞–Ω–≥–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await cancel_application(message, state)
        return
    
    is_valid, error_msg = validate_text(message.text, min_length=2, max_length=255)
    if not is_valid:
        await message.answer(f"‚ùå {error_msg}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(event_rank=message.text.strip())
    await state.set_state(ApplicationStates.country)
    
    await message.answer(
        "‚úÖ –†–∞–Ω–≥ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω\n\n"
        "–®–∞–≥ 3 –∏–∑ 5: –í–≤–µ–¥–∏—Ç–µ <b>—Å—Ç—Ä–∞–Ω—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è</b>:",
        parse_mode="HTML",
        reply_markup=get_cancel_keyboard()
    )


@router.message(StateFilter(ApplicationStates.country))
async def process_country(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await cancel_application(message, state)
        return
    
    is_valid, error_msg = validate_text(message.text, min_length=2, max_length=255)
    if not is_valid:
        await message.answer(f"‚ùå {error_msg}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(country=message.text.strip())
    await state.set_state(ApplicationStates.city)
    
    await message.answer(
        "‚úÖ –°—Ç—Ä–∞–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞\n\n"
        "–®–∞–≥ 4 –∏–∑ 5: –í–≤–µ–¥–∏—Ç–µ <b>–≥–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è</b>:",
        parse_mode="HTML",
        reply_markup=get_cancel_keyboard()
    )


@router.message(StateFilter(ApplicationStates.city))
async def process_city(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await cancel_application(message, state)
        return
    
    is_valid, error_msg = validate_text(message.text, min_length=2, max_length=255)
    if not is_valid:
        await message.answer(f"‚ùå {error_msg}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(city=message.text.strip())
    await state.set_state(ApplicationStates.participants_menu)
    
    data = await state.get_data()
    participants = data.get("participants", [])
    
    await message.answer(
        "‚úÖ –ì–æ—Ä–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω\n\n"
        "–®–∞–≥ 5 –∏–∑ 5: <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ–µ–∑–¥–∫–∏</b>\n\n"
        f"–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {len(participants)}\n\n"
        "–î–æ–±–∞–≤—å—Ç–µ –º–∏–Ω–∏–º—É–º –æ–¥–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞:",
        parse_mode="HTML",
        reply_markup=get_participants_menu(has_participants=len(participants) > 0)
    )


@router.message(StateFilter(ApplicationStates.participants_menu))
async def process_participants_menu(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    data = await state.get_data()
    participants = data.get("participants", [])
    
    if message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞":
        await state.set_state(ApplicationStates.participant_name)
        await message.answer(
            "üë§ –í–≤–µ–¥–∏—Ç–µ <b>–§–ò–û —É—á–∞—Å—Ç–Ω–∏–∫–∞</b> (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ):",
            parse_mode="HTML",
            reply_markup=get_cancel_keyboard()
        )
    
    elif message.text == "üìã –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤":
        if not participants:
            await message.answer("üìã –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—É—Å—Ç")
            return
        
        response = "üìã <b>–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b>\n\n"
        for idx, p in enumerate(participants, 1):
            response += (
                f"{idx}. <b>{p['full_name']}</b>\n"
                f"   –î–∞—Ç—ã: {p['date_from']} - {p['date_to']}\n\n"
            )
        
        await message.answer(response, parse_mode="HTML")
    
    elif message.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞":
        if not participants:
            await message.answer("‚ùå –ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        response = "üóëÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
        for idx, p in enumerate(participants, 1):
            response += f"{idx}. {p['full_name']}\n"
        
        await message.answer(response)
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    
    elif message.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–≤–æ–¥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤":
        if not participants:
            await message.answer("‚ùå –î–æ–±–∞–≤—å—Ç–µ –º–∏–Ω–∏–º—É–º –æ–¥–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞")
            return
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
        await show_confirmation(message, state)
    
    elif message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await cancel_application(message, state)


@router.message(StateFilter(ApplicationStates.participant_name))
async def process_participant_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –§–ò–û —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await cancel_application(message, state)
        return
    
    is_valid, error_msg = validate_full_name(message.text)
    if not is_valid:
        await message.answer(f"‚ùå {error_msg}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(current_participant_name=message.text.strip())
    await state.set_state(ApplicationStates.participant_date_from)
    
    await message.answer(
        "‚úÖ –§–ò–û —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ\n\n"
        "–í–≤–µ–¥–∏—Ç–µ <b>–¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø–æ–µ–∑–¥–∫–∏</b> (—Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì):",
        parse_mode="HTML",
        reply_markup=get_cancel_keyboard()
    )


@router.message(StateFilter(ApplicationStates.participant_date_from))
async def process_participant_date_from(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await cancel_application(message, state)
        return
    
    is_valid, error_msg = validate_date(message.text)
    if not is_valid:
        await message.answer(f"‚ùå {error_msg}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(current_participant_date_from=message.text.strip())
    await state.set_state(ApplicationStates.participant_date_to)
    
    await message.answer(
        "‚úÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞\n\n"
        "–í–≤–µ–¥–∏—Ç–µ <b>–¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏</b> (—Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì):",
        parse_mode="HTML",
        reply_markup=get_cancel_keyboard()
    )


@router.message(StateFilter(ApplicationStates.participant_date_to))
async def process_participant_date_to(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await cancel_application(message, state)
        return
    
    data = await state.get_data()
    date_from = data.get("current_participant_date_from")
    date_to = message.text.strip()
    
    is_valid, error_msg = validate_date_range(date_from, date_to)
    if not is_valid:
        await message.answer(f"‚ùå {error_msg}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
    participants = data.get("participants", [])
    participants.append({
        "full_name": data.get("current_participant_name"),
        "date_from": date_from,
        "date_to": date_to
    })
    
    await state.update_data(participants=participants)
    await state.set_state(ApplicationStates.participants_menu)
    
    await message.answer(
        f"‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
        f"–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(participants)}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_participants_menu(has_participants=True)
    )


async def show_confirmation(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    data = await state.get_data()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É
    summary = (
        "üìã <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:</b>\n\n"
        f"<b>–í–∏–¥ —Å–ø–æ—Ä—Ç–∞:</b> {data.get('sport_type')}\n"
        f"<b>–†–∞–Ω–≥ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:</b> {data.get('event_rank')}\n"
        f"<b>–°—Ç—Ä–∞–Ω–∞:</b> {data.get('country')}\n"
        f"<b>–ì–æ—Ä–æ–¥:</b> {data.get('city')}\n\n"
        f"<b>–£—á–∞—Å—Ç–Ω–∏–∫–∏ ({len(data.get('participants', []))}):</b>\n"
    )
    
    for idx, p in enumerate(data.get("participants", []), 1):
        summary += (
            f"{idx}. {p['full_name']}\n"
            f"   {p['date_from']} - {p['date_to']}\n"
        )
    
    await state.set_state(ApplicationStates.confirm)
    await message.answer(
        summary,
        parse_mode="HTML",
        reply_markup=get_confirmation_keyboard()
    )


@router.callback_query(F.data == "confirm_yes", StateFilter(ApplicationStates.confirm))
async def confirm_application(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏"""
    await callback.answer()
    await callback.message.edit_reply_markup(reply_markup=None)
    
    processing_msg = await callback.message.answer("‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏...")
    
    try:
        data = await state.get_data()
        user_id = callback.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await session.execute(
            select(User).where(User.telegram_id == user_id)
        )
        user = result.scalar_one()
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
        application = Application(
            user_id=user_id,
            sport_type=data.get("sport_type"),
            event_rank=data.get("event_rank"),
            country=data.get("country"),
            city=data.get("city"),
            participants_data={"participants": data.get("participants", [])},
            status=ApplicationStatus.SUBMITTED,
            submitted_at=datetime.now()
        )
        session.add(application)
        await session.flush()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        for idx, p in enumerate(data.get("participants", []), 1):
            participant = Participant(
                application_id=application.id,
                full_name=p["full_name"],
                date_from=p["date_from"],
                date_to=p["date_to"],
                order_num=idx
            )
            session.add(participant)
        
        await session.commit()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Excel
        excel_data = {
            "sport_type": data.get("sport_type"),
            "event_rank": data.get("event_rank"),
            "country": data.get("country"),
            "city": data.get("city"),
            "participants": data.get("participants", [])
        }
        
        excel_path = generate_excel(excel_data)
        application.excel_file_path = excel_path
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Email
        email_subject = f"–ó–∞—è–≤–∫–∞ –Ω–∞ —Å–ª—É–∂–µ–±–Ω—É—é –ø–æ–µ–∑–¥–∫—É ‚Äî {user.full_name or user.first_name} ‚Äî {data.get('city')}/{datetime.now().strftime('%d.%m.%Y')}"
        email_body = (
            f"–ó–∞—è–≤–∫–∞ –Ω–∞ —Å–ª—É–∂–µ–±–Ω—É—é –ø–æ–µ–∑–¥–∫—É\n\n"
            f"–û—Ç: {user.full_name or user.first_name} {user.last_name or ''}\n"
            f"–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {user.organization or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n\n"
            f"–í–∏–¥ —Å–ø–æ—Ä—Ç–∞: {data.get('sport_type')}\n"
            f"–†–∞–Ω–≥ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {data.get('event_rank')}\n"
            f"–°—Ç—Ä–∞–Ω–∞: {data.get('country')}\n"
            f"–ì–æ—Ä–æ–¥: {data.get('city')}\n\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(data.get('participants', []))}\n\n"
            f"–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ."
        )
        
        email_sent = await send_email(
            subject=email_subject,
            body=email_body,
            attachment_path=excel_path
        )
        application.email_sent = email_sent
        
        # # –û–¢–ö–õ–Æ–ß–ï–ù–û: –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram —á–∞—Ç (TARGET_CHAT_ID)
        # # –û—Å—Ç–∞–≤–ª–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ email
        # telegram_message = (
        #     f"üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Å–ª—É–∂–µ–±–Ω—É—é –ø–æ–µ–∑–¥–∫—É\n\n"
        #     f"–û—Ç: {user.full_name or user.first_name} {user.last_name or ''}\n"
        #     f"Username: @{user.username or 'N/A'}\n\n"
        #     f"–í–∏–¥ —Å–ø–æ—Ä—Ç–∞: {data.get('sport_type')}\n"
        #     f"–†–∞–Ω–≥: {data.get('event_rank')}\n"
        #     f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {data.get('country')}, {data.get('city')}\n"
        #     f"–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(data.get('participants', []))}"
        # )
        # 
        # telegram_sent = await send_to_telegram(
        #     bot=callback.bot,
        #     message=telegram_message,
        #     attachment_path=excel_path
        # )
        # application.telegram_sent = telegram_sent
        telegram_sent = False  # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram –æ—Ç–∫–ª—é—á–µ–Ω–∞
        
        await session.commit()
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = get_admin_menu() if user.is_admin else get_main_menu()
        
        await processing_msg.edit_text(
            "‚úÖ <b>–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!</b>\n\n"
            f"ID –∑–∞—è–≤–∫–∏: {application.id}\n"
            f"Email: {'‚úÖ' if email_sent else '‚ùå'}\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞—è–≤–æ–∫ –≤ –º–µ–Ω—é.",
            parse_mode="HTML"
        )
        
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}", exc_info=True)
        await processing_msg.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        
        keyboard = get_admin_menu() if callback.from_user.id in config.ADMIN_IDS else get_main_menu()
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)


@router.callback_query(F.data == "confirm_edit", StateFilter(ApplicationStates.confirm))
async def edit_application(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏"""
    await callback.answer("–§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ


@router.callback_query(F.data == "confirm_draft", StateFilter(ApplicationStates.confirm))
async def save_draft(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞"""
    await callback.answer()
    await callback.message.edit_reply_markup(reply_markup=None)
    
    try:
        data = await state.get_data()
        user_id = callback.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await session.execute(
            select(User).where(User.telegram_id == user_id)
        )
        user = result.scalar_one()
        
        # –°–æ–∑–¥–∞–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ –∑–∞—è–≤–∫–∏
        draft = Application(
            user_id=user_id,
            sport_type=data.get("sport_type"),
            event_rank=data.get("event_rank"),
            country=data.get("country"),
            city=data.get("city"),
            participants_data={"participants": data.get("participants", [])},
            status=ApplicationStatus.DRAFT,  # –°—Ç–∞—Ç—É—Å —á–µ—Ä–Ω–æ–≤–∏–∫–∞
            submitted_at=None
        )
        session.add(draft)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        for idx, p in enumerate(data.get("participants", []), 1):
            participant = Participant(
                application_id=draft.id,
                full_name=p["full_name"],
                date_from=p["date_from"],
                date_to=p["date_to"],
                order_num=idx
            )
            session.add(participant)
        
        await session.commit()
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = get_admin_menu() if user.is_admin else get_main_menu()
        
        await callback.message.answer(
            f"‚úÖ <b>–ß–µ—Ä–Ω–æ–≤–∏–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!</b>\n\n"
            f"ID —á–µ—Ä–Ω–æ–≤–∏–∫–∞: {draft.id}\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å –Ω–∏–º –ø–æ–∑–∂–µ —á–µ—Ä–µ–∑ –∏—Å—Ç–æ—Ä–∏—é –∑–∞—è–≤–æ–∫.",
            parse_mode="HTML",
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —á–µ—Ä–Ω–æ–≤–∏–∫–∞: {e}", exc_info=True)
        
        keyboard = get_admin_menu() if callback.from_user.id in config.ADMIN_IDS else get_main_menu()
        await callback.message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —á–µ—Ä–Ω–æ–≤–∏–∫–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=keyboard
        )


async def cancel_application(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏"""
    await state.clear()
    
    user_id = message.from_user.id
    keyboard = get_admin_menu() if user_id in config.ADMIN_IDS else get_main_menu()
    
    await message.answer(
        "‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
        reply_markup=keyboard
    )


@router.message(F.text == "üìã –ò—Å—Ç–æ—Ä–∏—è –∑–∞—è–≤–æ–∫")
async def show_history(message: Message, session: AsyncSession):
    """–ü–æ–∫–∞–∑ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞—è–≤–æ–∫"""
    has_access, user = await check_user_access(message.from_user.id, session)
    
    if not has_access:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    result = await session.execute(
        select(Application)
        .where(Application.user_id == message.from_user.id)
        .order_by(Application.created_at.desc())
    )
    applications = result.scalars().all()
    
    if not applications:
        await message.answer("üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫")
        return
    
    response = "üìã <b>–í–∞—à–∏ –∑–∞—è–≤–∫–∏:</b>\n\n"
    
    for app in applications[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
        status_emoji = "‚úÖ" if app.status == ApplicationStatus.SUBMITTED else "‚è≥"
        response += (
            f"{status_emoji} <b>–ó–∞—è–≤–∫–∞ #{app.id}</b>\n"
            f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {app.city}, {app.country}\n"
            f"–î–∞—Ç–∞: {app.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            f"–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(app.participants)}\n\n"
        )
    
    await message.answer(response, parse_mode="HTML")

"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–µ—Ä–Ω–æ–≤–∏–∫–∞–º–∏
"""
import logging
from aiogram import Router, F
from aiogram.types import Message
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from bot.database.models import User, UserStatus, Draft

logger = logging.getLogger(__name__)

router = Router()


async def check_user_access(user_id: int, session: AsyncSession) -> tuple[bool, User | None]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    result = await session.execute(
        select(User).where(User.telegram_id == user_id)
    )
    user = result.scalar_one_or_none()
    
    if not user or user.status != UserStatus.APPROVED:
        return False, user
    
    return True, user


@router.message(F.text == "üíæ –ú–æ–∏ —á–µ—Ä–Ω–æ–≤–∏–∫–∏")
async def show_drafts(message: Message, session: AsyncSession):
    """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤"""
    has_access, user = await check_user_access(message.from_user.id, session)
    
    if not has_access:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    result = await session.execute(
        select(Draft)
        .where(Draft.user_id == message.from_user.id)
        .order_by(Draft.updated_at.desc())
    )
    drafts = result.scalars().all()
    
    if not drafts:
        await message.answer(
            "üíæ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏, "
            "–Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫' –Ω–∞ —ç—Ç–∞–ø–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
        )
        return
    
    response = "üíæ <b>–í–∞—à–∏ —á–µ—Ä–Ω–æ–≤–∏–∫–∏:</b>\n\n"
    
    for draft in drafts:
        draft_data = draft.draft_data
        response += (
            f"üìÑ <b>–ß–µ—Ä–Ω–æ–≤–∏–∫ #{draft.id}</b>\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {draft.name or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}\n"
            f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {draft.updated_at.strftime('%d.%m.%Y %H:%M')}\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –¥–∞–Ω–Ω—ã—Ö
        if draft_data:
            if "city" in draft_data:
                response += f"–ì–æ—Ä–æ–¥: {draft_data.get('city')}\n"
            if "participants" in draft_data:
                response += f"–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(draft_data.get('participants', []))}\n"
        
        response += "\n"
    
    response += "\n<i>–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –µ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ.</i>"
    
    await message.answer(response, parse_mode="HTML")
    await message.answer(
        "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏.\n\n"
        "–ü–æ–∫–∞ —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É 'üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É'.",
        parse_mode="HTML"
    )

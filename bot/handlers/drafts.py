"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–µ—Ä–Ω–æ–≤–∏–∫–∞–º–∏
"""
import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from bot.database.models import User, UserStatus, Application, ApplicationStatus
from bot.keyboards import get_participants_menu, get_admin_menu, get_main_menu
from bot.states import ApplicationStates

logger = logging.getLogger(__name__)

router = Router()


async def check_user_access(user_id: int, session: AsyncSession) -> tuple[bool, User | None]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    result = await session.execute(
        select(User).where(User.telegram_id == user_id)
    )
    user = result.scalar_one_or_none()
    
    if not user or user.status != UserStatus.APPROVED:
        return False, user
    
    return True, user


@router.message(F.text == "üíæ –ú–æ–∏ —á–µ—Ä–Ω–æ–≤–∏–∫–∏")
async def show_drafts(message: Message, session: AsyncSession):
    """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤"""
    has_access, user = await check_user_access(message.from_user.id, session)
    
    if not has_access:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∫–∞–∫ –∑–∞—è–≤–∫–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º DRAFT)
    result = await session.execute(
        select(Application)
        .where(
            Application.user_id == message.from_user.id,
            Application.status == ApplicationStatus.DRAFT
        )
        .order_by(Application.updated_at.desc())
    )
    drafts = result.scalars().all()
    
    if not drafts:
        await message.answer(
            "üíæ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏, "
            "–Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫' –Ω–∞ —ç—Ç–∞–ø–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
        )
        return
    
    response = "üíæ <b>–í–∞—à–∏ —á–µ—Ä–Ω–æ–≤–∏–∫–∏:</b>\n\n"
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —á–µ—Ä–Ω–æ–≤–∏–∫–∞
    keyboard_buttons = []
    
    for draft in drafts:
        participants_count = len(draft.participants)
        response += (
            f"üìÑ <b>–ß–µ—Ä–Ω–æ–≤–∏–∫ #{draft.id}</b>\n"
            f"–ì–æ—Ä–æ–¥: {draft.city or '–ù–µ —É–∫–∞–∑–∞–Ω'}, {draft.country or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
            f"–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {participants_count}\n"
            f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {draft.updated_at.strftime('%d.%m.%Y %H:%M')}\n\n"
        )
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–µ—Ä–Ω–æ–≤–∏–∫–∞
        keyboard_buttons.append([
            InlineKeyboardButton(
                text=f"‚úèÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å #{draft.id}",
                callback_data=f"load_draft:{draft.id}"
            ),
            InlineKeyboardButton(
                text=f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å #{draft.id}",
                callback_data=f"delete_draft:{draft.id}"
            )
        ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    response += "\n<i>–í—ã–±–µ—Ä–∏—Ç–µ —á–µ—Ä–Ω–æ–≤–∏–∫ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è:</i>"
    
    await message.answer(response, parse_mode="HTML", reply_markup=keyboard)


@router.callback_query(F.data.startswith("load_draft:"))
async def load_draft(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ó–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã"""
    await callback.answer()
    
    try:
        draft_id = int(callback.data.split(":")[1])
        
        # –ü–æ–ª—É—á–∞–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫
        result = await session.execute(
            select(Application)
            .where(
                Application.id == draft_id,
                Application.user_id == callback.from_user.id,
                Application.status == ApplicationStatus.DRAFT
            )
        )
        draft = result.scalar_one_or_none()
        
        if not draft:
            await callback.message.answer("‚ùå –ß–µ—Ä–Ω–æ–≤–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        participants_data = []
        for p in draft.participants:
            participants_data.append({
                "full_name": p.full_name,
                "date_from": p.date_from,
                "date_to": p.date_to
            })
        
        await state.update_data(
            sport_type=draft.sport_type,
            event_rank=draft.event_rank,
            country=draft.country,
            city=draft.city,
            participants=participants_data,
            draft_id=draft_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        )
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –º–µ–Ω—é —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        await state.set_state(ApplicationStates.participants_menu)
        
        await callback.message.edit_reply_markup(reply_markup=None)
        await callback.message.answer(
            f"‚úÖ <b>–ß–µ—Ä–Ω–æ–≤–∏–∫ #{draft_id} –∑–∞–≥—Ä—É–∂–µ–Ω!</b>\n\n"
            f"üìã <b>–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:</b>\n"
            f"–í–∏–¥ —Å–ø–æ—Ä—Ç–∞: {draft.sport_type}\n"
            f"–†–∞–Ω–≥ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {draft.event_rank}\n"
            f"–°—Ç—Ä–∞–Ω–∞: {draft.country}\n"
            f"–ì–æ—Ä–æ–¥: {draft.city}\n"
            f"–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(participants_data)}\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:",
            parse_mode="HTML",
            reply_markup=get_participants_menu(has_participants=len(participants_data) > 0)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞: {e}", exc_info=True)
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞")


@router.callback_query(F.data.startswith("delete_draft:"))
async def delete_draft(callback: CallbackQuery, session: AsyncSession):
    """–£–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞"""
    await callback.answer()
    
    try:
        draft_id = int(callback.data.split(":")[1])
        
        # –ü–æ–ª—É—á–∞–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫
        result = await session.execute(
            select(Application)
            .where(
                Application.id == draft_id,
                Application.user_id == callback.from_user.id,
                Application.status == ApplicationStatus.DRAFT
            )
        )
        draft = result.scalar_one_or_none()
        
        if not draft:
            await callback.message.answer("‚ùå –ß–µ—Ä–Ω–æ–≤–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –£–¥–∞–ª—è–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫
        await session.delete(draft)
        await session.commit()
        
        await callback.message.edit_reply_markup(reply_markup=None)
        await callback.message.answer(
            f"‚úÖ –ß–µ—Ä–Ω–æ–≤–∏–∫ #{draft_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω",
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —á–µ—Ä–Ω–æ–≤–∏–∫–∞: {e}", exc_info=True)
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —á–µ—Ä–Ω–æ–≤–∏–∫–∞")

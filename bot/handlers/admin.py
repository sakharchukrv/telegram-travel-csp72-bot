"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
"""
import logging
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from bot.config import config
from bot.database.models import User, UserStatus, Application
from bot.keyboards.common import get_user_approval_keyboard, get_main_menu

logger = logging.getLogger(__name__)

router = Router()


def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in config.ADMIN_IDS


@router.message(Command("pending"))
async def cmd_pending(message: Message, session: AsyncSession):
    """–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–¥–æ–±—Ä–µ–Ω–∏—è"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º PENDING
    result = await session.execute(
        select(User).where(User.status == UserStatus.PENDING)
    )
    pending_users = result.scalars().all()
    
    if not pending_users:
        await message.answer("‚úÖ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–¥–æ–±—Ä–µ–Ω–∏—è")
        return
    
    for user in pending_users:
        user_info = (
            f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è</b>\n\n"
            f"ID: <code>{user.telegram_id}</code>\n"
            f"Username: @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"–ò–º—è: {user.first_name or ''} {user.last_name or ''}\n"
            f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.created_at.strftime('%d.%m.%Y %H:%M')}\n"
        )
        
        await message.answer(
            user_info,
            parse_mode="HTML",
            reply_markup=get_user_approval_keyboard(user.telegram_id)
        )


@router.message(Command("users"))
@router.message(F.text == "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
async def cmd_users(message: Message, session: AsyncSession):
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    result = await session.execute(select(User))
    users = result.scalars().all()
    
    if not users:
        await message.answer("üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç")
        return
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    status_emoji = {
        UserStatus.PENDING: "‚è≥",
        UserStatus.APPROVED: "‚úÖ",
        UserStatus.REJECTED: "‚ùå",
        UserStatus.REVOKED: "‚õî"
    }
    
    status_name = {
        UserStatus.PENDING: "–û–∂–∏–¥–∞—é—Ç",
        UserStatus.APPROVED: "–û–¥–æ–±—Ä–µ–Ω—ã",
        UserStatus.REJECTED: "–û—Ç–∫–ª–æ–Ω–µ–Ω—ã",
        UserStatus.REVOKED: "–û—Ç–æ–∑–≤–∞–Ω—ã"
    }
    
    users_by_status = {}
    for user in users:
        if user.status not in users_by_status:
            users_by_status[user.status] = []
        users_by_status[user.status].append(user)
    
    response = "üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
    
    for status in [UserStatus.APPROVED, UserStatus.PENDING, UserStatus.REJECTED, UserStatus.REVOKED]:
        if status in users_by_status:
            response += f"{status_emoji[status]} <b>{status_name[status]}:</b>\n"
            for user in users_by_status[status]:
                admin_badge = " üë®‚Äçüíº" if user.is_admin else ""
                response += (
                    f"  ‚Ä¢ ID: <code>{user.telegram_id}</code> | "
                    f"@{user.username or 'N/A'}{admin_badge}\n"
                )
            response += "\n"
    
    response += (
        "\n<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "/approve <code>user_id</code> - –æ–¥–æ–±—Ä–∏—Ç—å\n"
        "/reject <code>user_id</code> - –æ—Ç–∫–ª–æ–Ω–∏—Ç—å\n"
        "/revoke <code>user_id</code> - –æ—Ç–æ–∑–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø"
    )
    
    await message.answer(response, parse_mode="HTML")


@router.message(F.text == "‚è≥ –ù–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–∏")
async def cmd_pending_button(message: Message, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–∏'"""
    await cmd_pending(message, session)


@router.message(Command("approve"))
async def cmd_approve(message: Message, session: AsyncSession):
    """–û–¥–æ–±—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    # –ü–∞—Ä—Å–∏–º user_id
    args = message.text.split()
    if len(args) < 2:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /approve <user_id>")
        return
    
    try:
        target_user_id = int(args[1])
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id")
        return
    
    # –û–¥–æ–±—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await approve_user(target_user_id, session, message.bot)
    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –æ–¥–æ–±—Ä–µ–Ω")


@router.message(Command("reject"))
async def cmd_reject(message: Message, session: AsyncSession):
    """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    # –ü–∞—Ä—Å–∏–º user_id
    args = message.text.split()
    if len(args) < 2:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /reject <user_id>")
        return
    
    try:
        target_user_id = int(args[1])
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id")
        return
    
    # –û—Ç–∫–ª–æ–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await reject_user(target_user_id, session, message.bot)
    await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω")


@router.message(Command("revoke"))
async def cmd_revoke(message: Message, session: AsyncSession):
    """–û—Ç–∑—ã–≤ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    # –ü–∞—Ä—Å–∏–º user_id
    args = message.text.split()
    if len(args) < 2:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /revoke <user_id>")
        return
    
    try:
        target_user_id = int(args[1])
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    result = await session.execute(
        select(User).where(User.telegram_id == target_user_id)
    )
    user = result.scalar_one_or_none()
    
    if not user:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –û—Ç–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø
    user.status = UserStatus.REVOKED
    await session.commit()
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await message.bot.send_message(
            target_user_id,
            "‚õî –í–∞—à –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –±—ã–ª –æ—Ç–æ–∑–≤–∞–Ω.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
        )
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}")
    
    await message.answer(f"‚õî –î–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} –æ—Ç–æ–∑–≤–∞–Ω")


@router.callback_query(F.data.startswith("user_approve_"))
async def callback_approve_user(callback: CallbackQuery, session: AsyncSession):
    """Callback –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    user_id = int(callback.data.split("_")[2])
    await approve_user(user_id, session, callback.bot)
    
    await callback.message.edit_text(
        callback.message.text + "\n\n‚úÖ <b>–û–¥–æ–±—Ä–µ–Ω</b>",
        parse_mode="HTML"
    )
    await callback.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–¥–æ–±—Ä–µ–Ω")


@router.callback_query(F.data.startswith("user_reject_"))
async def callback_reject_user(callback: CallbackQuery, session: AsyncSession):
    """Callback –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    user_id = int(callback.data.split("_")[2])
    await reject_user(user_id, session, callback.bot)
    
    await callback.message.edit_text(
        callback.message.text + "\n\n‚ùå <b>–û—Ç–∫–ª–æ–Ω–µ–Ω</b>",
        parse_mode="HTML"
    )
    await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–µ–Ω")


async def approve_user(user_id: int, session: AsyncSession, bot):
    """–û–¥–æ–±—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    result = await session.execute(
        select(User).where(User.telegram_id == user_id)
    )
    user = result.scalar_one_or_none()
    
    if not user:
        return
    
    user.status = UserStatus.APPROVED
    await session.commit()
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await bot.send_message(
            user_id,
            "‚úÖ –í–∞—à –¥–æ—Å—Ç—É–ø –æ–¥–æ–±—Ä–µ–Ω!\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–æ–µ–∑–¥–∫–∏.",
            reply_markup=get_main_menu()
        )
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


async def reject_user(user_id: int, session: AsyncSession, bot):
    """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    result = await session.execute(
        select(User).where(User.telegram_id == user_id)
    )
    user = result.scalar_one_or_none()
    
    if not user:
        return
    
    user.status = UserStatus.REJECTED
    await session.commit()
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await bot.send_message(
            user_id,
            "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
        )
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
